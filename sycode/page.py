import copy
import numpy as np
import pandas as pd
from matplotlib import pyplot as plt
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.utils import shuffle
from sklearn.linear_model import OrthogonalMatchingPursuitCV
from sklearn.model_selection import LeaveOneOut
import math
import sys
import random
from sklearn.preprocessing import StandardScaler
from itertools import permutations

from linear_regression_std import tls, ls

med_tls_em_rmse=[0.06602932404227692, 0.06600756632557073, 0.06598347221164877, 0.06598200498225265, 0.0659794727191382, 0.06597451333511203, 0.06596915537200614, 0.06595928463241982, 0.06596915537200614, 0.06597729395429389, 0.06598331752840207, 0.06599500150223928, 0.06601839462387374, 0.06603097223509351, 0.0660412434285629, 0.06605029573152608]
med_tls_rmse=[0.06580476344642971, 0.06580476344642971, 0.06583810215135924, 0.0659624520989454, 0.06604051907810737, 0.06613682175858851, 0.06633140428451435, 0.06653400690207029, 0.06676084115404819, 0.0670602785388769, 0.0673573444228267, 0.06770622665588602, 0.06803335643803352, 0.06842765463252234, 0.06890409836048811, 0.0693475687168991]
med_ls_em_rmse= [0.06664672526727564, 0.06663091122077563, 0.066639205004701, 0.066639205004701, 0.06664073941243545, 0.06664259640631523, 0.06664330194646878, 0.06664330194646878, 0.06664472328049977, 0.06664472328049977, 0.06664740852477076, 0.06664330194646878, 0.06664259640631523, 0.06664259640631523, 0.06664259640631523, 0.06663983807858866]
med_ls_rmse= [0.06408036896859626, 0.06490253682002453, 0.06579719693466703, 0.06670598576654233, 0.06780643854470886, 0.06889661922865989, 0.07015654439575153, 0.07133449042647982, 0.0725936049634811, 0.07379562709385994, 0.07505303591404999, 0.07652219474984259, 0.07799643162646765, 0.0796614086020862, 0.08127174723731724, 0.08307725241936723]

med_tls_em_rmse: [0.06595569580317029, 0.06597122594434598, 0.06595869540652594]
med_tls_rmse: [0.06616530787473651, 0.06628185624693514, 0.06643857833326501]
med_ls_em_rmse: [0.0666368412881714, 0.0666440177403462, 0.06664854888484387]
med_ls_rmse: [0.06931257151003695, 0.07046280068101758, 0.07168435935923265]

med_tls_em_rmse: [0.06593468281186637, 0.06595363103714165, 0.065951831066703, 0.06595928463241982, 0.0659725983951577, 0.06599337213035078, 0.06602499644922938, 0.06605188877643613, 0.06606026080509977, 0.06606685645248196, 0.06608343239714343]
med_tls_rmse: [0.06697733514412335, 0.06727037128265859, 0.06748820049848402, 0.06789623785555507, 0.06829082089371324, 0.068783547622494, 0.06928426704211746, 0.06977348709986132, 0.07039506061373849, 0.07090068437188181, 0.07158470577999518]
med_ls_em_rmse: [0.06669008282876386, 0.06668543724585094, 0.06666375631791008, 0.06666375631791008, 0.06665343881344782, 0.06665586252484705, 0.06665135347462504, 0.06664711459751305, 0.06664711459751305, 0.06664711459751305, 0.06663674830226338]
med_ls_rmse: [0.07434642234889265, 0.0756049493457547, 0.07761649556802289, 0.07925589989162415, 0.08091031624007375, 0.0827918074890007, 0.08461691599469132, 0.08643094508161783, 0.08817720724217476, 0.09003546714906979, 0.09191028035520267]



x_plt = np.arange(0.25, 1.01, 0.05)
    # x_plt=[0.25,0.3]
print(x_plt)
plt.plot(x_plt,med_tls_em_rmse, )
plt.plot(x_plt,med_tls_rmse)
plt.plot(x_plt,med_ls_em_rmse, )
plt.plot(x_plt,med_ls_rmse)
plt.legend(['TLS_EM', 'TLS','LS_EM', 'LS'])  #
plt.xlabel('Noise')
plt.ylabel('RMSE')

plt.title("data split:50,noise generation:20")
plt.show()